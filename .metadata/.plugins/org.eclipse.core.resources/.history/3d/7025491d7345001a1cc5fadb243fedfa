package uniandes.lym.robot.control;

import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;

import javax.swing.SwingUtilities;

import uniandes.lym.robot.kernel.*;



/**
 * Receives commands and relays them to the Robot. 
 */

public class Interpreter   {

	/**
	 * Robot's world
	 */
	private RobotWorldDec world;   

	private HashMap<String, Integer> hash;

	public Interpreter()
	{
		hash = new HashMap<>();

	}


	/**
	 * Creates a new interpreter for a given world
	 * @param world 
	 */


	public Interpreter(RobotWorld mundo)
	{

		hash = new HashMap<>();
		this.world =  (RobotWorldDec) mundo;

	}


	/**
	 * sets a the world
	 * @param world 
	 */

	public void setWorld(RobotWorld m) 
	{
		world = (RobotWorldDec) m;

	}



	/**
	 *  Processes a sequence of commands. A command is a letter  followed by a ";"
	 *  The command can be:
	 *  M:  moves forward
	 *  R:  turns right
	 *  
	 * @param input Contiene una cadena de texto enviada para ser interpretada
	 */

	public String process(String input) throws Error
	{   

		StringBuffer output=new StringBuffer("SYSTEM RESPONSE: -->\n");	
		input = input.replace(" ", "");
		if(input.startsWith("ROBOT_R"))
		{
			if(input.contains("VARS"))
			{
				String[] vars = input.split("VARS");
				String[] names = vars[1].split(",");
				for (int i = 0; i < names.length; i++) {
					
					if(i == names.length-1){
						String[] begin = names[i].split("BEGIN");
						hash.put(begin[0], -1);
					}
					else{
						hash.put(names[i], -1);
					}
				}
				//System.err.println(hash.keySet());
				
				String[] begin= input.split("BEGIN");
				String[] instructions = begin[1].split(";");
				for (int i = 0; i < instructions.length; i++)
				{
					if(instructions[i].startsWith("assign") )
					{
						String asignar = instructions[i].substring(7);
						String[] aux = asignar.split("to:");
						//System.out.println(aux[1]);
						hash.replace(aux[1], Integer.valueOf(aux[0]));
						//System.out.println(hash.get(aux[1]));

					}
					else if (instructions[i].startsWith("move"))
					{
						if(instructions[i].contains("toThe"))
						{

						}
						else if(instructions[i].contains("inDir"))
						{

						}
						else
						{
							String num = instructions[i].substring(4);
							world.moveForward(Integer.valueOf(num));
						}
					}
					else if(instructions[i].startsWith("turn") )
					{
						String girar = instructions[i].substring(5);
						if(girar == "left")
						{
							world.turnRight();
							world.turnRight();
							world.turnRight();
						}
						else if (girar == "around")
						{
							world.turnRight();
							world.turnRight();
						}
						else
							world.turnRight();
					}
					else if(instructions[i].startsWith("face") )
					{
						String orientacion = instructions[i].substring(5);
						int or = world.getOrientacion();
						if (orientacion == "north")
						{
							while (or!=0) {
								world.turnRight();
								or = world.getOrientacion();
							}
						}
						if (orientacion == "south")
						{
							while(or!=1){
								world.turnRight();
								or = world.getOrientacion();
							}
						}
						if (orientacion == "east")
						{
							while(or!=2){
								world.turnRight();
								or = world.getOrientacion();
							}
						}
						if (orientacion == "west")
						{
							while(or!=3){
								world.turnRight();
								or = world.getOrientacion();
							}
						}
					}
					else if(instructions[i].startsWith("put") )
					{

					}
					else if(instructions[i].startsWith("pick") )
					{

					}
				}

			}
		}
		else{

			int i;
			int n;
			boolean ok = true;
			n= input.length();

			i  = 0;
			try	    {
				while (i < n &&  ok) {
					switch (input.charAt(i)) {
					case 'M': world.moveForward(1); output.append("move \n");break;
					case 'R': world.turnRight(); output.append("turnRignt \n");break;
					case 'C': world.putChips(1); output.append("putChip \n");break;
					case 'B': world.putBalloons(1); output.append("putBalloon \n");break;
					case  'c': world.pickChips(1); output.append("getChip \n");break;
					case  'b': world.grabBalloons(1); output.append("getBalloon \n");break;
					default: output.append(" Unrecognized command:  "+ input.charAt(i)); ok=false;
					}

					if (ok) {
						if  (i+1 == n)  { output.append("expected ';' ; found end of input; ");  ok = false ;}
						else if (input.charAt(i+1) == ';') 
						{
							i= i+2;
							try {
								Thread.sleep(1000);
							} catch (InterruptedException e) {
								System.err.format("IOException: %s%n", e);
							}

						}
						else {output.append(" Expecting ;  found: "+ input.charAt(i+1)); ok=false;
						}
					}
				}


			}


			catch (Error e ){
				output.append("Error!!!  "+e.getMessage());

			}

		}
		return output.toString();	
	}



}
